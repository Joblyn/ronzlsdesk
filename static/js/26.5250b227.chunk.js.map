{"version":3,"sources":["components/Page.js","utils/colors.js","pages/user/bookAppointment.js"],"names":["bem","bn","create","Page","_ref","breadcrumbs","Tag","tag","className","children","restProps","Object","_home_joblyn_Desktop_asiwajudev_crm_2016698b9caf_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","classes","b","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","assign","e","reactstrap__WEBPACK_IMPORTED_MODULE_4__","reactstrap__WEBPACK_IMPORTED_MODULE_5__","length","map","_ref2","index","name","active","key","defaultProps","title","getColor","availableColor","arguments","undefined","window","getComputedStyle","document","documentElement","getPropertyValue","concat","CreateAppointment","primaryColor","secondaryColor","today","Date","_useState","useState","toLocaleString","_useState2","slicedToArray","date","setDate","_useState3","_useState4","message","setMessage","dispatch","useDispatch","userBookAppointment","useSelector","state","lastWeek","getFullYear","getMonth","getDate","useEffect","scrollTo","isInvalid","isSuccessful","alert","console","log","result","react_default","Form","id","onSubmit","preventDefault","payload","bookAppointment","userBookAppointmentWithAdmin","es","selected","minDate","width","height","theme","accentColor","floatingNav","background","chevron","color","headerColor","selectionColor","textColor","default","todayColor","weekdayColor","onSelect","FormGroup","InputField","required","type","placeholder","onChange","target","value","Button","form","style","fontSize","disabled"],"mappings":"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","file":"static/js/26.5250b227.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport bn from 'utils/bemnames';\n\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\n// import Typography from './Typography';\n\nconst bem = bn.create('page');\n\nconst Page = ({\n  // title,\n  breadcrumbs,\n  tag: Tag,\n  className,\n  children,\n  ...restProps\n}) => {\n  const classes = bem.b('px-3', className);\n\n  return (\n    <Tag className={classes} {...restProps}>\n      <div className={bem.e('header')}>\n        {/* {title && typeof title === 'string' ? (\n          <Typography type=\"h1\" className={bem.e('title')}>\n            {title}\n          </Typography>\n        ) : (\n            title\n          )} */}\n        {breadcrumbs && (\n          <Breadcrumb className={bem.e('breadcrumb')}>\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            {breadcrumbs.length &&\n              breadcrumbs.map(({ name, active }, index) => (\n                <BreadcrumbItem key={index} active={active}>\n                  {name}\n                </BreadcrumbItem>\n              ))}\n          </Breadcrumb>\n        )}\n      </div>\n      {children}\n    </Tag>\n  );\n};\n\nPage.propTypes = {\n  tag: PropTypes.component,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  breadcrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      active: PropTypes.bool,\n    }),\n  ),\n};\n\nPage.defaultProps = {\n  tag: 'div',\n  title: '',\n};\n\nexport default Page;\n","// const availableColors = [\n//   'blue',\n//   'indigo',\n//   'purple',\n//   'pink',\n//   'red',\n//   'orange',\n//   'yellow',\n//   'green',\n//   'teal',\n//   'cyan',\n//   'white',\n//   'gray',\n//   'gray-dark',\n//   'primary',\n//   'secondary',\n//   'success',\n//   'info',\n//   'warning',\n//   'danger',\n//   'light',\n//   'dark',\n// ];\n\nexport const getColor = (availableColor = 'primary') => {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  const color = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(`--${availableColor}`);\n\n  return color;\n};\n\nexport const getThemeColors = () => [\n  'primary',\n  'secondary',\n  'success',\n  'info',\n  'warning',\n  'danger',\n];\n","import React, { useEffect, useState } from 'react';\nimport InfiniteCalendar from 'react-infinite-calendar';\nimport { getColor } from 'utils/colors';\nimport { Button, Form, FormGroup } from 'reactstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport InputField from '../../components/InputField';\nimport Page from 'components/Page';\nimport { bookAppointment } from '../../actions/user/Users';\nimport { userBookAppointmentWithAdmin } from '../../apiConstants/apiConstants';\n\nexport default function CreateAppointment() {\n  const primaryColor = getColor('primary');\n  const secondaryColor = getColor('secondary');\n  \n  const today = new Date();\n  const [date, setDate] = useState(today.toLocaleString());\n  const [message, setMessage] = useState('');\n  const dispatch = useDispatch();\n  const userBookAppointment = useSelector(state => state.userBookAppointment);\n\n  const lastWeek = new Date(\n    today.getFullYear(),\n    today.getMonth(),\n    today.getDate() - 7,\n  );\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n  const isInvalid = date === '' || message === '';\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const payload = {\n      message,\n      date\n    };\n    console.log(payload);\n    dispatch(bookAppointment(userBookAppointmentWithAdmin, payload))\n  }\n\n  if(userBookAppointment.isSuccessful) {\n    alert(`Successfully booked appointment with admin on ${date}`);\n    console.log(userBookAppointment.result);\n  }\n\n  return (\n    <Page\n      className=\"DashboardPage\"\n      title=\"Dashboard\"\n      breadcrumbs={[{ name: 'Create Appointment', active: true }]} \n    >\n    <main className=\"appt-main\">\n      <Form className=\"appt-form\" id=\"appt-form\" onSubmit={handleSubmit}>\n        <div className=\"calender\">\n          <InfiniteCalendar\n            selected={today}\n            minDate={lastWeek}\n            width={'100%'}\n            height={300}\n            theme={{\n              accentColor: primaryColor,\n              floatingNav: {\n                background: secondaryColor,\n                chevron: primaryColor,\n                color: '#FFF',\n              },\n              headerColor: primaryColor,\n              selectionColor: secondaryColor,\n              textColor: {\n                active: '#FFF',\n                default: '#333',\n              },\n              todayColor: secondaryColor,\n              weekdayColor: primaryColor,\n            }}\n            onSelect={ date => setDate(date.toLocaleString())}\n          />\n        </div>\n        <FormGroup className=\"form-group\">\n          <InputField \n            required\n            type=\"text\"\n            name=\"message\"\n            placeholder=\"Appointment Message\"\n            className=\"inp mt-2\"\n            onChange={({ target }) => setMessage(target.value)}\n          />\n        </FormGroup>\n        <Button className=\"button mt-3\" form=\"appt-form\" type=\"submit\" style={{ fontSize: '1rem'}} disabled={isInvalid}>Book Appointment</Button>\n      </Form>\n    </main>\n    </Page>\n  )\n}"],"sourceRoot":""}